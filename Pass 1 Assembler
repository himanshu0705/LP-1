**pass1assembeler.java**
import java.io.*;
import java.util.*;

class Tuple
{
    String mnemonic, mclass, opcode;
    int length;

    Tuple(String s1, String s2, String s3, String s4)
    {
        mnemonic = s1;
        mclass = s2;
        opcode = s3;
        length = Integer.parseInt(s4.trim());
    }
}

public class pass1assembler
{
	public static HashMap<String, Tuple> map = new HashMap<String, Tuple>();
    public static HashMap<String, Integer> registers = new HashMap<String, Integer>();
    public static ArrayList<String> literals = new ArrayList<String>();
    public static ArrayList<String> symbols = new ArrayList<String>();

    pass1assembler()
    {
        registers.put("AREG", 1);
        registers.put("BREG", 2);
        registers.put("CREG", 3);
        registers.put("DREG", 4);
    }

    public static void mapper()
    {
        try
        {
            String newSt = "";
            FileInputStream input = new FileInputStream("mot.txt");
            int i = input.read();
            while (i != -1) {
                newSt += (char) i;
                i = input.read();
            }
            input.close();
            StringTokenizer st = new StringTokenizer(newSt, " ");
            String sst = "";
            while (st.hasMoreTokens()) {
                sst += st.nextToken() + " ";
            }
            sst = sst.toString();
            String[] arr2 = sst.split("\n");
            for (int j = 0; j < arr2.length; j++)
            {
                map.put(arr2[j].split(" ")[0], new Tuple(arr2[j].split(" ")[0], arr2[j].split(" ")[1], arr2[j].split(" ")[2], arr2[j].split(" ")[3]));
            }
        }catch (Exception e)
        {
            System.out.println(e);
        }

    }

    public static String[] inputFileRead()
    {
        String newSt = "";
        String[] arr2 = {};
        try
        {
            FileInputStream input = new FileInputStream("inputpass1assembler.txt");
            int i = input.read();
            while (i != -1) {
                newSt += (char) i;
                i = input.read();
            }
            input.close();
            
            StringTokenizer st = new StringTokenizer(newSt, " ");
            String sst = "";
            while (st.hasMoreTokens())
            {
                sst += st.nextToken() + " ";
            }
            sst = sst.toString();
            arr2 = sst.split("\n");
        }catch (Exception e)
        {
            System.out.println("Something went wrong!" + e);
        }
        return arr2;
    }

    public void intermediateCoder()
    {
        mapper();
        String[] inputArr = inputFileRead();

        String sst = "";
        String forLiteral = "";
        String forSymbol = "";
        int addressStart = 0, address = 0;
        int addressCounter = 1;
        for (int i = 0; i < inputArr.length-1; i++)
        {
            inputArr[i] = inputArr[i].trim();
            inputArr[i] = inputArr[i].replaceAll(",",", ");

            Tuple value = map.get(inputArr[i].split(" ")[0]);
            if (value==null)
            {
                value = map.get(inputArr[i].split(" ")[1]);
            }

            String mclass = value.mclass;
            String opcode = value.opcode;
            int length = value.length;
            if (value.mclass.equalsIgnoreCase("AD"))
            {
                if(inputArr[i].split(" ").length>1)
                {
                    sst = sst + "(" + String.format("%s, %s", mclass, opcode) + ")" + "	" + "(" + String.format("C,%s", inputArr[i].split(" ")[1].trim() + ")" + "\n");
                    System.out.println(inputArr[i].split(" ")[1].trim());
                    addressStart = Integer.parseInt(inputArr[i].split(" ")[1].trim());
                }
                else
                {
                    sst = sst + "(" + String.format("%s, %s", mclass, opcode) + ")" + "\n";
                    System.out.println(sst);
                }

            }
            else if(value.mclass.equalsIgnoreCase("DL"))
            {
                sst = sst + "(" + String.format("%s, %s", mclass, opcode) + ")" + "	" + "(" + String.format("%s", inputArr[i].split(" ")[2].trim() + ")" + "\n");
                System.out.println(sst);
            }
            else
            {
                address = addressStart;
                if (inputArr[i].split(" ")[2].startsWith("="))
                {
                    System.out.println(inputArr[i].split(" ")[2]);
                    literals.add(inputArr[i].split(" ")[2].split("=")[1]);
                    sst = sst + "(" + String.format("%s, %s", mclass, opcode) + ")" + "	" + "(" + String.format("%s", registers.get(inputArr[i].split(" ")[1].split(",")[0].trim()) + ")" + "(" + String.format("L,%s", literals.indexOf(inputArr[i].split(" ")[2].split("=")[1])) + ")" + "\n");
                    address = addressCounter + address;
                    forLiteral = forLiteral + inputArr[i].split(" ")[2].trim() + "	" + String.format("%s", address) + "\n";
                    addressCounter++;
                }
                else
                {
                    System.out.println(inputArr[i].split(" ")[2]);
                    symbols.add(inputArr[i].split(" ")[2]);
                    address = addressCounter + address;
                    sst = sst + "(" + String.format("%s, %s", mclass, opcode) + ")" + "	" + "(" + String.format("%s", registers.get(inputArr[i].split(" ")[1].split(",")[0].trim()) + ")" + "(" + String.format("S,%s", symbols.indexOf(inputArr[i].split(" ")[2])) + ")" + "\n");
                    forSymbol = forSymbol + inputArr[i].split(" ")[2] + "	" + String.format("%s", address) + "	" + String.format("%s", length) + "\n";
                    addressCounter++;
                }
            }
        }
        sst = sst.toString();
        forLiteral = forLiteral.toString();
        forSymbol = forSymbol.toString();
        try
        {
            FileOutputStream output = new FileOutputStream("./out.txt");
            FileOutputStream literalOut = new FileOutputStream("./literalTable.txt");
            FileOutputStream symbolOut = new FileOutputStream("./symbolTable.txt");
            output.write(sst.getBytes());
            literalOut.write(forLiteral.getBytes());
            symbolOut.write(forSymbol.getBytes());
            output.close();
            literalOut.close();
            symbolOut.close();
        }catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    public static void main(String[] args)
    {
        pass1assembler pg = new pass1assembler();
        pg.intermediateCoder();
    }
}

**inputpass1assembler.txt**
            START   100
            MOVER   AREG,B
            ADD     BREG,='6'
            MOVEM   AREG,A
            SUB     CREG,='1'
            LTORG
            ADD     DREG,='5'
A           DS      10
            LTORG
            SUB     AREG,='1'
B           DC      1
C           DC      1
            END

**mot.txt**
START   AD  01  0
END     AD  02  0
LTORG   AD  05  0
ADD     IS  01  1
SUB     IS  02  1
MULT    IS  03  1
MOVER   IS  04  1
MOVEM   IS  05  1
DS      DL  01  0
DC      DL  02  1
